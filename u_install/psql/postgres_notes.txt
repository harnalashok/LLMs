# Postgres notes:
# Last amended: 20th Feb, 2025

Concepts
=========
        Key words: Default database, superuser, logged in role, prompt

	Postgres has, by default, a database 'postgres' and a superuser 'postgres'.
	A superuser in PostgreSQL is a user who bypasses all permission checks. 
	This user can do anything. The prompt:
	
	               postgres=# 
	
	indicates that the database is postgres and the '#' symbol indicates that the logged
	in role is the superuser, 'postgres'.
	You can change the logged in role with the command: 'Set Role muyser ;' and, the prompt
        will change. 'Set Role' DOES NOT change connected database:
	
		postgres=# set role myuser ;
		postgres=> create database xyz ;              -- Role changed; prompt changes. Database is still 'postgres'
		ERROR:  permission denied to create database  --'myuser' must be first given privilegs by superuser.
	
	Set the role back to superuser, and as superuser, create a database and grant ownership to
	myuser:
	
		postgres=> set role postgres ;
		postgres=# CREATE DATABASE mydatabase WITH OWNER = myuser;
		CREATE DATABASE
	
	IF 'myuser' wants to create a table, he has to proceed as follows. First connect to
	the database, mydatabase:
	
		postgres=# \c mydatabase
		You are now connected to database "mydatabase" as user "postgres".
		mydatabase=#
	
	Connected to database, mydatabase, but the logged in role is still the superuser. If
	any table is created, it will be created by the superuser within this database. Remember,
	the superuser can bypass all permission checks.
	
		postgres=# \c mydatabase
		You are now connected to database "mydatabase" as user "postgres".
		mydatabase=# create table n8n (id integer) ;
		CREATE TABLE
		mydatabase=# \dt
		        List of relations
		 Schema | Name | Type  |  Owner
		--------+------+-------+----------
		 public | n8n  | table | postgres
		(1 row)
	
	Thus, the user, myuser, has no authority over the table n8n. There are two ways, myuser
	can have a table:

		I. Superuser grants all privileges over the table.
		II. The user logs in as 'myuser' and creates a table.
	
	Here we follow the IInd route:
	
		mydatabase=# set role myuser ;
		SET
		mydatabase=> create table axr (id char(5)) ;   
		CREATE TABLE
		mydatabase=> \dt             --Check ownership
		        List of relations
		 Schema | Name | Type  |  Owner
		--------+------+-------+----------
		 public | axr  | table | myuser
		 public | n8n  | table | postgres
		(2 rows)

	To find out the current logged in role, issue command 'select current_user'

		mydatabase=> select current_user ;
		 current_user
		--------------
		 myuser
		(1 row)

	A quick summary:
		postgres=# 		        -- Database postgres. Role postgres
		db_amit=# 			-- Database  db_amit. Role postgers
		db_amit=> 			-- Database  db_amit. Role amit

#0.0  Install postgres as:

	sudo apt install postgresql postgresql-contrib sqlite3   -y
	sudo apt install postgresql-server-dev-14  -y
	cd /tmp
	git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
	cd pgvector
	make
	sudo make install 
	cd ~/



#1. Open psql shell:

	sudo -u postgres psql postgres

#2. Create a role with some password:

	CREATE ROLE myuser LOGIN PASSWORD 'mypass' ;

#3. Create a database:

	CREATE DATABASE mydatabase WITH OWNER = myuser;

#4. Connect to a database:
#   This connection to mydatabase will be 

	\c mydatabase

# Example: 
#	postgres=> \c mydatabase
#	You are now connected to database "mydatabase" as user "postgres".


#5. Make this connected database as a vector database:

	CREATE EXTENSION vector; 
 
#6. Create a table under this database but with user 'myuser'
#	and NOT postgres user:
 
 	\c mydatabase
 	set role myuser ;
 	create table n8x (id integer) ;
 	
#7. Check tables created by user 'myuser'
#   Command is \dt

	sudo -u postgres psql postgres
	\c mydatabase
	set role myuser ;
	create table xyz (id integer) ;
	\dt


#8. Quickatart-1: 
#   Create a database queen with role as 'queen':
#   Proceed as follows to execute all the steps.
#   Default schema is: public

	sudo -u postgres psql postgres
	CREATE ROLE queen LOGIN PASSWORD 'queen' ;
	CREATE DATABASE db_queen WITH OWNER = queen ;	-- Owner has all privilegs
	\l		-- Check databases created




#9. Quickatart-2: 
#   Create a table n8n for user 'joker' in database 'joker':
#   Proceed as follows to execute all the steps.
#   Default schema is: public

	sudo -u postgres psql postgres
	CREATE ROLE joker LOGIN PASSWORD 'joker' ;
	CREATE DATABASE db_joker WITH OWNER = joker;
	\c db_joker				-- Connect to database db_joker 
	set role joker ;			-- Change role to joker. Default is postgres
	create table n8n (id char(5) primary key, name varchar(20), qty real, tourist boolean, ht integer) ; --  role joker
        \d n8n                                  -- describe table structure of 'n8n'
	\dt      			        -- Displaty list of all tables


#10. Create table sample:

CREATE TABLE product (
    			id           char(5) primary key,
			name         varchar(20),           -- low temperature
			price        real,           -- high temperature
			qty          integer,          -- precipitation
			purchased    boolean,          -- true or false
			feedback     text 
		    );
		    
        \dt                      ---gives the list of all relations under the database
		    
	db_amit=> \dt            -- db_amit is database
	
		 List of relations
	 Schema |   Name   | Type  |  Owner   
	--------+----------+-------+----------
	 public | n8x      | table | amit
	 public | product  | table | amit
	 public | producta | table | amit
	 public | weather  | table | postgres
	(4 rows)

        \d  product         -- describe structure of table 

	 	 	

#11. Prompt differences:

postgres=# 		        -- Connected to default database 'postgres'
db_amit=# 			-- Database is db_amit. Hash shows that role is postgres
db_amit=> 			-- Database is db_amit. '=>' shows that role is NOT postgres

db_amit=> 			-- Role is NOT postgres. Database is db_amit
amit=> set role postgres ;
SET
db_amit=# 			-- Role is postgres. Database is db_amit


# 12. Grant all privilges to a role for a table under a database
#     The table was created as owner 'postgres'


db_amit=# \dt			--Database (d) tables(t)

		  List of relations
	 Schema |   Name   | Type  |  Owner   
	--------+----------+-------+----------
	 public | n8x      | table | amit
	 public | product  | table | amit
	 public | producta | table | amit
	 public | weather  | table | postgres
	(4 rows)

# Now grant all priviges on table postgres to user amit:

	db_amit=# 	GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO amit ;

# Use \dp command to get more database (d) privilege (p) informtion

	db_amit=# \dp
		                          Access privileges
	 Schema |   Name   | Type  |     Access privileges     | Column privileges | Policies 
	--------+----------+-------+---------------------------+-------------------+----------
	 public | n8x      | table | amit=arwdDxt/amit         |                   | 
	 public | product  | table | amit=arwdDxt/amit         |                   | 
	 public | producta | table | amit=arwdDxt/amit         |                   | 
	 public | weather  | table | postgres=arwdDxt/postgres+|                   | 
		|          |       | amit=arwdDxt/postgres     |                   | 
	(4 rows)


###########
#13.0 Slash commands: 
###########

    \l             -- List all databases
    \c def         -- Connect to database def as user postgres
    \dp            -- Access privileges GRANTED regarding relations in connected database
    \d xyz         -- Describe table xyz in the connected database
    \dt            -- List all relations under connected database
 


## From command line:
## Ref: https://stackoverflow.com/a/28687714
## sudo -u postgres bash -c "psql -c \"CREATE USER vagrant WITH PASSWORD 'vagrant';\""
##################################

 	

 

