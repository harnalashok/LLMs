Pyhton Virtual Environments
============================

Virtual environments in python can be created using conda, uv or simply python.
Virtual environments are directories that contain all necessary python packages
to work on a project. Simple python command to create a virtual environment is:

          python3 -m venv /path/to/package/name

For example, the python, 'venv' command would create the
environment at the following location:

          python3 -m venv path/to/package/name

  will create a folder at:
  
          /home/ashok/path/to/package/name/

And all python packages would be installed thereon. 

-m flag
=========
The -m switch in Python is a command-line option that allows you 
to run a module as a script (ie import module as also execute module
file). This means you can execute Python code directly from the
command line without the need for an external script file. 
By using -m, you can invoke Python modules as standalone programs.
Thus, the line:

          python3 -m venv /path/to/package/name

imports and exectes venv module.

Activate and Deactivate
=========================

You can activate the virtual environment, as:

        source /path/to/package/name/bin/activate

And deactivate it, with simple command:

          deactivate

          ashok@ashok:~$  python3 -m venv path/to/package/name

You can explore what is under name/ folder, as:

          ashok@ashok:~$ ls -la ~/path/to/package/name/
          total 24
          drwxr-xr-x 5 ashok ashok 4096 Jan 26 13:40 .
          drwxr-xr-x 3 ashok ashok 4096 Jan 26 13:40 ..
          drwxr-xr-x 2 ashok ashok 4096 Jan 26 13:40 bin
          drwxr-xr-x 2 ashok ashok 4096 Jan 26 13:40 include
          drwxr-xr-x 3 ashok ashok 4096 Jan 26 13:40 lib
          lrwxrwxrwx 1 ashok ashok    3 Jan 26 13:40 lib64 -> lib
          -rw-r--r-- 1 ashok ashok   71 Jan 26 13:40 pyvenv.cfg

And here is the content of .cfg file.

          ashok@ashok:~$ cat ~/path/to/package/name/pyvenv.cfg
          home = /usr/bin
          include-system-site-packages = false
          version = 3.10.12

uv
======
Ref: https://docs.astral.sh/uv/pip/environments/#using-a-virtual-environment
++++++

uv also creates python environment, as:

          uv venv 

A specific name or path can be specified, e.g., to create a virtual environment 
at my-name:

          uv venv my-name

Unlike pip , uv requires using a virtual environment by default.

This creates a python environment at folder .venv under the current path.
You can specify the location, as:

          ashok@ashok:~$ uv venv ~/abc/def/hjk
          Using CPython 3.10.12 interpreter at: /usr/bin/python3
          Creating virtual environment at: abc/def/hjk
          Activate with: source abc/def/hjk/bin/activate

By default, each time the command, 'uv venv' is executed, earlier default
python environment is deleted. This default behaviour, however, can be changed. 
See:

          uv help venv

When using the default virtual environment name, uv will automatically find and 
use the virtual environment during subsequent invocations.

          uv venv
          # Install a package in the new virtual environment
          uv pip install ruff
uv pip install, behind the scenes activates the environment, installs pip package
and then deactivates it. There is no need to deactivate the environment when using uv.

You can also explicitly activate a uv evironment,as:

          source .venv/bin/activate

When running a command that mutates an environment such as uv pip sync or uv pip install,
uv will search for a virtual environment in the following order:

    i)   An activated virtual environment based on the VIRTUAL_ENV environment variable.
    ii)  An activated Conda environment based on the CONDA_PREFIX environment variable.
    iii) A virtual environment at .venv in the current directory, or in the nearest parent directory.

If no virtual environment is found, uv will prompt the user to create one in the current directory 
via 'uv venv'.

List all python environments
===========================

You can list all python environment under the home folder, as:

          find ~ | grep /bin/activate

Here is an example:

          ashok@ashok:~$ find ~ | grep /bin/activate
          /home/ashok/path/to/package/name/bin/activate.csh
          /home/ashok/path/to/package/name/bin/activate.fish
          /home/ashok/path/to/package/name/bin/activate
          /home/ashok/.venv/bin/activate.nu
          /home/ashok/.venv/bin/activate.csh
          /home/ashok/.venv/bin/activate.fish
          /home/ashok/.venv/bin/activate
          /home/ashok/.venv/bin/activate.ps1
          /home/ashok/.venv/bin/activate_this.py
          /home/ashok/.venv/bin/activate.bat
          /home/ashok/llama/bin/activate.csh
          /home/ashok/llama/bin/activate.fish
          /home/ashok/llama/bin/activate

Delete or Remove python virtual env
=====================================

The only way  one can remove python environment is:
         sudo rm -rf venv
where venv is your path to environment. There is no command for deleting your 
virtual environment. Simply deactivate it and rid your application of its 
artifacts by recursively removing the directory.
Note that this is the same regardless of what kind of virtual environment 
you are using. virtualenv, venv, Anaconda environment, pyenv, pipenv are
all based the same principle here.
uv also deletes the earlier virtual environment, when you create it.

Install multiple virtual environments with diff python versions
=================================

Should you want to create a virtual env for a python version
that is not available on your machine, you have to first install that
python version and then only create a new virtual env. Here are the steps
for installing a venv which is python3.11 based:

                    echo "Existing python versions on your machine are are as below"
                    echo " "
                    
                    ls /usr/bin/ | grep python
                    
                    read -p "Do you want to continue to install python3.11 ? " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ ! $REPLY =~ ^[Yy]$ ]]
                    then
                        exit 1
                    fi
                    echo " "
                    echo "---------"
                    echo "Installing python3.11"
                    echo "----- "
                    sleep 4
                    
                    # Install python 3.11 now
                    sudo apt update
                    sudo apt install python3.11 -y
                    
                    # Install tool to create python3.11 venv
                    # invokable with its own Python executable
                    
                    sudo apt install python3.11-venv  -y
                    
                    # Check again python versions
                    echo "Installed python versions now are:"
                    echo " "
                    ls /usr/bin/ | grep python
                    sleep 9
                    
                    # Create python virtual env at openwebui
                    echo "Creating python virtual env at openwebui"
                    # Using python3.11 package
                    python3.11 -m venv /home/ashok/openwebui
                    
                    echo "Activating the new python env"
                    # Activate the python env
                    source /home/ashok/openwebui/bin/activate
                    sleep 2
                    # DONE

--------------------------------------

  
