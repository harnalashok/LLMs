# Postgres notes:  
# Last amended: 25th July, 2025  

Concepts
=========
       1. psql Prompt:
       A standard prompt is displayed when psql is ready to accept a new SQL command
       or meta-command. By default, it often shows the database name followed by => 
       for regular users or # for superusers (e.g., mydatabase=> or postgres=#). 
       List all databases with \l command.

       2. System users and postgres users:
       The root user is an account on the system independent from Postgres. There is 
       only ONE root user. A superuser is an account in Postgres with access to 
       everything. There may be MANY superusers. System accounts and Postgres 
       accounts are different things, although unless you specify a Postgres username
       when you connect to the database (through utilities like psql, createdb, dropdb,
       or otherwise), it will use the current system user's name in hopes that there is
       a corresponding Postgres account with the same name. The root user does not, 
       by default, have a corresponding account in Postgres. When you install Postgres 
       on *nix, it creates both a superuser named postgres and a system user named postgres.
       Therefore, when you need to do something with Postgres as the built-in superuser, 
       you have two options:

               a. You may sudo su - postgres to become the postgres system user and 
                  execute your command (createdb, psql, etc). Because the system user
                  has the same name as the database superuser, your command will 
                  connect as the appropriate account.
    	       b. You may specify the username to execute as with the -U switch, eg
                  psql -U postgres   

        To list all 'superusers', issue command: \du

        3. Postgres has, by default, a database 'postgres' and a superuser 'postgres'.
	A superuser in PostgreSQL is a user who bypasses all permission checks. 
	This user can do anything. The prompt:
	
	               postgres=# 
	
	indicates that the database is postgres and the '#' symbol indicates that the logged
	in role is the superuser, 'postgres'.
	You can change the logged in role with the command: 'Set Role muyser ;' and, the prompt
        will change. 'Set Role' DOES NOT change connected database:
	
		postgres=# set role myuser ;
		postgres=> create database xyz ;              -- Role changed; prompt changes. Database still 'postgres'
		ERROR:  permission denied to create database  --'myuser' be first given privilegs by superuser
                                                              	
	Set the role back to superuser, and as superuser, create a database and grant ownership to
	myuser:
	
		postgres=> set role postgres ;

	4. To create a database and a user, first loginto system user (and NOT postgres user) postgres :

		ashok@ashok:~$ sudo su postgres
           
            Then, open psql:

                postgres@ashok:~$ psql

            This command assumes that postgres has a role with the same name as the current user *ie postgres)
            and tries to log you in (else, issue command: psql ashok --- to login a user ashok). Prompt is:

		postgres=# 
	
	5. Create a user and create a database, as:

		postgres=# create user joker with password 'joker' ;
		postgres=# CREATE DATABASE joker ;
		postgres=# CREATE DATABASE king with owner ashok ; 
		postgres=# GRANT ALL PRIVILEGES ON DATABASE joker TO ashok; 
        
	6. A postgres user, say, 'joker' cannot log into postgres with psql unless, joker, is also a system user.
	   Thus, this command fails:

		ashok@ashok:~$ psql -U joker -d 'joker' ;
	
	7. Login as, postgres user and change role to joker, as:

		sudo su postgres
		psql -U postgres
		postgres=# set role joker ;
		postgres=> 
		# Connect to joker database
		postgres=> \c joker
		You are now connected to database "joker" as user "postgres".
		joker=# 
		# Create a table:
		joker=# CREATE TABLE product (
                        id           char(5) primary key,
                        name         varchar(20),      
                        price        real,             
                        qty          integer,          
                        purchased    boolean,          -- true or false
                        feedback     text 
                    );
		CREATE TABLE
		# Insert values
		joker=# INSERT INTO product (id, name, price) VALUES ('01121', 'Mustang', 60.4);
		joker=# select * from product ;
		# Table with constraints:
		joker=# CREATE TABLE employees (
		    				employee_id SERIAL PRIMARY KEY,
		    				first_name VARCHAR(50) NOT NULL,
		    				last_name VARCHAR(50) NOT NULL,
		    				email VARCHAR(100) UNIQUE,
		    				hire_date DATE DEFAULT CURRENT_DATE
						);
	8. Foreign key:
		joker=# drop table departments ;
		DROP TABLE
		joker=# drop table employees ;
		DROP TABLE
		joker=# CREATE TABLE departments (
		    department_id int PRIMARY KEY,
		    department_name VARCHAR(100) NOT NULL
		);
		CREATE TABLE
		joker=# CREATE TABLE employees (
		    employee_id int PRIMARY KEY,
		    employee_name VARCHAR(100) NOT NULL,
		    departmentId INT REFERENCES departments (department_id)
		    );
		CREATE TABLE
		joker=# 

		joker=# INSERT INTO departments (department_id,department_name)
		VALUES (1, 'Human Resources'), (10,'Finance'), (20,'IT');
		INSERT 0 3
		joker=# INSERT INTO employees (employee_id,employee_name, departmentId) values (1,'Alice', 10);
		INSERT 0 1
		joker=# INSERT INTO employees (employee_id,employee_name, departmentId) values (2,'Bob', 10);
		INSERT 0 1
		joker=# INSERT INTO employees (employee_id,employee_name, departmentId) values (3,'sudha', 20);
		INSERT 0 1
		joker=# INSERT INTO employees (employee_id,employee_name, departmentId) values (4,'Charlie', 3);
		ERROR:  insert or update on table "employees" violates foreign key constraint "employees_departmentid_fkey"
		DETAIL:  Key (departmentid)=(3) is not present in table "departments".
		joker=# 

	9. Schemas in postgresql:
		In PostgreSQL, a schema is a named collection or logical grouping of database objects within a single database. 
		These objects can include tables, views, functions, sequences, indexes, and data types. Schemas serve as 
		namespaces, allowing for the organization and management of database objects in complex databases.
		
		Key aspects of PostgreSQL schemas:
		Organization:
			Schemas provide a way to logically group related database objects, making complex databases more 
			manageable and easier to understand. For instance, you could have separate schemas for different
			applications, departments, or functional areas within the same database (e.g., sales, hr, ecommerce).
		
		Namespacing:
			Schemas create distinct namespaces. This means that objects with the same name can exist in different
			schemas without causing conflicts. For example, you could have a users table in a public schema and 
			another users table in an auth schema, referenced as public.users and auth.users respectively. 
		Access Control:
			Schemas can be used to manage permissions and access control. You can grant or revoke privileges on
			specific schemas or the objects within them to different users or roles, enhancing security and data
			isolation.
		Default Schema:
			Every new PostgreSQL database automatically includes a public schema, which is the default schema for
			creating objects if no specific schema is mentioned.

		We created tables without specifying any schema names. By default such tables (and other objects) are 
		automatically put into a schema named “public”. Every new database contains such a schema. Thus, the 
		following are equivalent:
		
		CREATE TABLE products ( ... );
		
		and:
		
		CREATE TABLE public.products ( ... );

		and:

		CREATE TABLE mydatabase.public.products (...);

	10. What tables exist in the current databaseL Use \dt
		joker=# \dt
		            List of relations
		 Schema |    Name     | Type  |  Owner   
		--------+-------------+-------+----------
		 public | departments | table | postgres
		 public | employees   | table | postgres
		 public | product     | table | postgres
		(3 rows)

	11. Commonly Used Meta-Commands:

		    \l:			Lists all available databases on the PostgreSQL server.
		    \c:  mydatabase: 	Connects to a mydatabase.
		    \dt: 		Lists all tables within the current database. 
		    \d employees: 	Describes employees table
		    \du: 		Lists all roles (users) and their attributes.
		    \dn: 		Lists all schemas.
		    \q: 		Quits the psql session.
		    \?: 		Displays a comprehensive list of all available meta-commands with brief descriptions.

	12. Roles vs users:
		In PostgreSQL, the concepts of "users" and "roles" are essentially unified. Both are represented by the
		same underlying entity, a "role." The primary difference lies in a single attribute: the LOGIN attribute.
	    Role:
    		A role in PostgreSQL is a general concept that can represent either an individual user or a group of users. 
		Roles are used to manage permissions and ownership of database objects. They can be granted various 
		privileges (e.g., SELECT, INSERT, UPDATE) on tables, views, functions, and other database objects. 
		Roles can also be members of other roles, inheriting their permissions.
    	   User:
    		A "user" in PostgreSQL is simply a role that has the LOGIN attribute enabled. This attribute allows 
		the role to connect to the PostgreSQL server and authenticate, typically using a password. When you 
		CREATE USER, you are effectively creating a role with the LOGIN attribute set to TRUE by default. 

	Key Differences Summarized:
	    Login Capability:
    		The defining difference is that a "user" (a role with LOGIN attribute) can log in to the database,
		while a "group role" (a role without LOGIN attribute) cannot directly log in.
    	    Purpose:
    		Roles without LOGIN are primarily used for organizing permissions and creating logical groups of
		privileges that can be easily assigned to multiple users. Roles with LOGIN are intended for 
		individual or application-specific access.

	13. psql directly from command line (shell):
		## Ref: https://stackoverflow.com/a/28687714
		## sudo -u postgres bash -c "psql -c \"CREATE USER vagrant WITH PASSWORD 'vagrant';\""
		##################################
		AA)
		# Remember postgres is BOTH a system user as also postgres user
		# sudo -u postgres: Run the command as user (postgres) other than the default root user.
		# psql -c : Specifies that psql is to execute the given command string, command.
		# psql -c "command" -d : Specifies name of database to connect to while executing the command.
		# For system user: 'ashok'
		sudo -u postgres psql -c 'create database ashok;'
		sudo -u postgres psql -c 'create user ashok;'
		sudo -u postgres psql -c 'grant all privileges on database ashok to ashok;' -d ashok
		sudo -u postgres psql -c "alter user ashok with encrypted password 'qwerty';"
		sudo -u postgres psql -c "GRANT ALL ON SCHEMA public TO ashok;" -d ashok 
		sudo -u postgres psql -c " CREATE EXTENSION vector;" -d ashok 

		AB)
		# For any other user amit
		# First add amit to system user
		sudo useradd -m amit
		sudo passwd amit
		# Execute all the following as superuser ie as postgres 
		# Unless so specified (with -d), default connected database is: postgres
		sudo -u postgres psql -c 'create database amit;'
		sudo -u postgres psql -c 'create user amit;'
		# Issue command as superuser but while connected to amit database
		sudo -u postgres psql -c 'grant all privileges on database amit to amit;' -d amit
		# Issue command as superuser (postgres) but while connected to postgres database (default)
		sudo -u postgres psql -c "alter user amit with encrypted password 'amit';"
		# Modify as postgres user but while connected to amit database
		sudo -u postgres psql -c " GRANT ALL ON SCHEMA public TO amit;" -d amit 
		sudo -u postgres psql -c " CREATE EXTENSION vector;" -d gautam 

		AC)
		# For any user gandhi
		sudo useradd -m gandhi
		sudo passwd gandhi
		sudo -u postgres psql -c 'create database gandhi;'
		sudo -u postgres psql -c 'create user gandhi;'
		sudo -u postgres psql -c 'grant all privileges on database gandhi to gandhi;' -d gandhi
		sudo -u postgres psql -c "alter user gandhi with encrypted password 'gandhi';"
		sudo -u postgres psql -c " GRANT ALL ON SCHEMA public TO gandhi;" -d gandhi 
		sudo -u postgres psql -c " CREATE EXTENSION vector;" -d gandhi 
		
		AD)
		# psql shell
		CREATE TABLE acars (  brand VARCHAR(255),  model VARCHAR(255),  year INT);
		INSERT INTO cars (brand, model, year) VALUES ('Ford', 'Mustang', 1964);
		select * from cars ;
    		
	14. Self-study References:
		Querying a table:    https://www.postgresql.org/docs/current/tutorial-select.html
		Join between tables: https://www.postgresql.org/docs/current/tutorial-join.html
		Aggregate functions: https://www.postgresql.org/docs/current/tutorial-agg.html

	15. Postgresql version:

		psql -V | awk '{print $3}' |  cut -d '.' -f 1 | tr -d '\n'
                version=$(psql -V | awk '{print $3}' |  cut -d '.' -f 1 | tr -d '\n')
                echo $version


	16. Security configuration in postgresql:

		Two files deal with security: postgresql.conf and pg_hba.conf. Both are in folder:
		/etc/postgresql/$version/main/ folder. One way to amend is here:

		echo "listen_addresses = '*'" | sudo tee -a /etc/postgresql/$version/main/postgresql.conf  > /dev/null


		Configure /etc/postgresql/pg_hba.conf. For broader access (e.g., from a specific IP range),
		you can use a CIDR notation. In google you can raise a query: 
		‘how to write 172.30.109.200 with netmask of 255.255.240.0 in cidr notation’. 
		(Also may see this link for calculation: https://dnschecker.org/netmask-cidr.php )
			host    all     all       172.30.96.0/20    md5



=======================OLD Collection=================================

	
	IF 'myuser' wants to create a table, he has to proceed as follows. First connect to
	the database, mydatabase:
	
		postgres=# \c mydatabase
		You are now connected to database "mydatabase" as user "postgres".
		mydatabase=#
	
	Connected to database, mydatabase, but the logged in role is still the superuser. If
	any table is created, it will be created by the superuser within this database. Remember,
	the superuser can bypass all permission checks.
	
		postgres=# \c mydatabase
		You are now connected to database "mydatabase" as user "postgres".
		mydatabase=# create table n8n (id integer) ;
		CREATE TABLE
		mydatabase=# \dt
		        List of relations
		 Schema | Name | Type  |  Owner
		--------+------+-------+----------
		 public | n8n  | table | postgres
		(1 row)
	
	Thus, the user, myuser, has no authority over the table n8n. There are two ways, myuser
	can have a table:

		I. Superuser grants all privileges over the table.
		II. The user logs in as 'myuser' and creates a table.
	
	Here we follow the IInd route:
	
		mydatabase=# set role myuser ;
		SET
		mydatabase=> create table axr (id char(5)) ;   
		CREATE TABLE
		mydatabase=> \dt             --Check ownership
		        List of relations
		 Schema | Name | Type  |  Owner
		--------+------+-------+----------
		 public | axr  | table | myuser
		 public | n8n  | table | postgres
		(2 rows)

	To find out the current logged in role, issue command 'select current_user'

		mydatabase=> select user ;    -- OR current_user
		 current_user
		--------------
		 myuser
		(1 row)

	A quick summary:
		postgres=# 		        -- Database postgres. Role postgres
		db_amit=# 			-- Database  db_amit. Role postgers
		db_amit=> 			-- Database  db_amit. Role amit

#0.0  Install postgres as:

	sudo apt install postgresql postgresql-contrib sqlite3   -y
	sudo apt install postgresql-server-dev-14  -y
	cd /tmp
	git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
	cd pgvector
	make
	sudo make install 
	cd ~/


#1. Open psql shell:

	sudo -u postgres psql postgres

#2. Create a role with some password:

	CREATE ROLE myuser LOGIN PASSWORD 'mypass' ;

#3. Create a database:

	CREATE DATABASE mydatabase WITH OWNER = myuser;

#4. Connect to a database:
#   This connection to mydatabase will be 

	\c mydatabase

# Example: 
#	postgres=> \c mydatabase
#	You are now connected to database "mydatabase" as user "postgres".


#5. Make this connected database as a vector database:

	CREATE EXTENSION vector; 
 
#6. Create a table under this database but with user 'myuser'
#	and NOT postgres user:
 
 	\c mydatabase
 	set role myuser ;
 	create table n8x (id integer) ;
 	
#7. Check tables created by user 'myuser'
#   Command is \dt

	sudo -u postgres psql postgres
	\c mydatabase
	set role myuser ;
	create table xyz (id integer) ;
	\dt


#8. Quickatart-1: 
# Create user ashok, database ashok and password: ashok, as:
	sudo -u postgres psql -c 'create database ashok;'
	sudo -u postgres psql -c 'create user ashok;'
	sudo -u postgres psql -c 'grant all privileges on database ashok to ashok;'
	sudo -u postgres psql -c "alter user ashok with encrypted password 'qwerty';"

#9. Quickatart-2: 
#   Create a database queen with role as 'queen':
#   Proceed as follows to execute all the steps.
#   Default schema is: public

	sudo -u postgres psql postgres
	CREATE ROLE queen LOGIN PASSWORD 'queen' ;
	CREATE DATABASE db_queen WITH OWNER = queen ;	-- Owner has all privilegs
	\l		-- Check databases created


#10. Quickatart-3: 
#   Create a table n8n for user 'joker' in database 'joker':
#   Proceed as follows to execute all the steps.
#   Default schema is: public

	sudo -u postgres psql postgres
	CREATE ROLE joker LOGIN PASSWORD 'joker' ;
	CREATE DATABASE db_joker WITH OWNER = joker;
	\c db_joker				-- Connect to database db_joker 
	set role joker ;			-- Change role to joker. Default is postgres
	create table n8n (id char(5) primary key, name varchar(20), qty real, tourist boolean, ht integer) ; --  role joker
        \d n8n                                  -- describe table structure of 'n8n'
	\dt      			        -- Displaty list of all tables


#11. Create table sample:

CREATE TABLE product (
    			id           char(5) primary key,
			name         varchar(20),           -- low temperature
			price        real,           -- high temperature
			qty          integer,          -- precipitation
			purchased    boolean,          -- true or false
			feedback     text 
		    );
		    
        \dt                      ---gives the list of all relations under the database
		    
	db_amit=> \dt            -- db_amit is database
	
		 List of relations
	 Schema |   Name   | Type  |  Owner   
	--------+----------+-------+----------
	 public | n8x      | table | amit
	 public | product  | table | amit
	 public | producta | table | amit
	 public | weather  | table | postgres
	(4 rows)

        \d  product         -- describe structure of table 

	 	 	

#12. Prompt differences:

postgres=# 		        -- Connected to default database 'postgres'
db_amit=# 			-- Database is db_amit. Hash shows that role is postgres
db_amit=> 			-- Database is db_amit. '=>' shows that role is NOT postgres

db_amit=> 			-- Role is NOT postgres. Database is db_amit
amit=> set role postgres ;
SET
db_amit=# 			-- Role is postgres. Database is db_amit


# 13. Grant all privilges to a role for a table under a database
#     The table was created as owner 'postgres'


db_amit=# \dt			--Database (d) tables(t)

		  List of relations
	 Schema |   Name   | Type  |  Owner   
	--------+----------+-------+----------
	 public | n8x      | table | amit
	 public | product  | table | amit
	 public | producta | table | amit
	 public | weather  | table | postgres
	(4 rows)

# Now grant all priviges on table postgres to user amit:

	db_amit=# 	GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO amit ;

# Use \dp command to get more database (d) privilege (p) informtion

	db_amit=# \dp
		                          Access privileges
	 Schema |   Name   | Type  |     Access privileges     | Column privileges | Policies 
	--------+----------+-------+---------------------------+-------------------+----------
	 public | n8x      | table | amit=arwdDxt/amit         |                   | 
	 public | product  | table | amit=arwdDxt/amit         |                   | 
	 public | producta | table | amit=arwdDxt/amit         |                   | 
	 public | weather  | table | postgres=arwdDxt/postgres+|                   | 
		|          |       | amit=arwdDxt/postgres     |                   | 
	(4 rows)


###########
#13.0 Slash commands: 
###########

    \l             -- List all databases
    \c def         -- Connect to database def as user postgres
    \dp            -- Access privileges GRANTED regarding relations in connected database
    \d xyz         -- Describe table xyz in the connected database
    \dt            -- List all relations under connected database
 


## From command line:
## Ref: https://stackoverflow.com/a/28687714
## sudo -u postgres bash -c "psql -c \"CREATE USER vagrant WITH PASSWORD 'vagrant';\""
##################################
# Remember postgres is BOTH a system user as also postgres user
# sudo -u postgres: Run the command as a user (postgres) other than the default target user (usually root).
# psql -c : Specifies that psql is to execute the given command string, command.
# psql -c "command" -d : Specifies the name of the database to connect to while executing the command.
# For system user: 'ashok'
sudo -u postgres psql -c 'create database ashok;'
sudo -u postgres psql -c 'create user ashok;'
sudo -u postgres psql -c 'grant all privileges on database ashok to ashok;' -d ashok
sudo -u postgres psql -c "alter user ashok with encrypted password 'qwerty';"
sudo -u postgres psql -c "GRANT ALL ON SCHEMA public TO ashok;" -d ashok 
sudo -u postgres psql -c " CREATE EXTENSION vector;" -d ashok 

# For any other user amit
# First add amit to system user
sudo useradd -m amit
sudo passwd amit
# Execute all the following as superuser ie as postgres 
# Unless so specified (with -d), default connected database is: postgres
sudo -u postgres psql -c 'create database amit;'
sudo -u postgres psql -c 'create user amit;'
# Issue command as superuser but while connected to amit database
sudo -u postgres psql -c 'grant all privileges on database amit to amit;' -d amit
# Issue command as superuser (postgres) but while connected to postgres database (default)
sudo -u postgres psql -c "alter user amit with encrypted password 'amit';"
# Modify as postgres user but while connected to amit database
sudo -u postgres psql -c " GRANT ALL ON SCHEMA public TO amit;" -d amit 
sudo -u postgres psql -c " CREATE EXTENSION vector;" -d gautam 

# For any user gandhi
sudo useradd -m gandhi
sudo passwd gandhi
sudo -u postgres psql -c 'create database gandhi;'
sudo -u postgres psql -c 'create user gandhi;'
sudo -u postgres psql -c 'grant all privileges on database gandhi to gandhi;' -d gandhi
sudo -u postgres psql -c "alter user gandhi with encrypted password 'gandhi';"
sudo -u postgres psql -c " GRANT ALL ON SCHEMA public TO gandhi;" -d gandhi 
sudo -u postgres psql -c " CREATE EXTENSION vector;" -d gandhi 



PGPASSWORD=ashok psql -h localhost -p 5432 -U ashok -d ashok  
# psql shell
CREATE TABLE acars (  brand VARCHAR(255),  model VARCHAR(255),  year INT);
INSERT INTO cars (brand, model, year) VALUES ('Ford', 'Mustang', 1964);
select * from cars ;

 	

 

